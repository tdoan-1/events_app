generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model conference {
  conference_id Int        @id @default(autoincrement())
  title         String     @db.VarChar(50)
  short_name    String     @db.VarChar(20)
  loca          String     @db.VarChar(100)
  dates         DateTime   @db.Date
  website       String?    @db.VarChar(50)
  logo          String?    @db.VarChar(100)
  schedule      schedule[]
  talks         talks[]
  users         users[]
}

model flags {
  flag_id  Int    @id @default(autoincrement())
  paper_id Int
  papers   papers @relation(fields: [paper_id], references: [paper_id], onDelete: Cascade, onUpdate: NoAction)
}

model markers {
  marker_id   Int     @id @default(autoincrement())
  marker_desc String? @db.VarChar(50)
}

model own_talks {
  user_id  Int
  talks_id Int
  talks    talks @relation(fields: [talks_id], references: [talks_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, talks_id])
}

model papers {
  paper_id    Int       @id @default(autoincrement())
  Abstract    String?
  Title       String?
  Description String?
  Author      String?
  user_id     Int?
  flags       flags[]
  session     session[]
}

model reminder {
  reminder_id   Int       @id @default(autoincrement())
  conference_id Int       @default(autoincrement())
  title         String?   @db.VarChar(100)
  Event_time    DateTime? @db.Time(6)
}

model roles {
  role_id   Int     @id @default(autoincrement())
  role_desc String? @db.VarChar(30)
  users     users[]
}

model session {
  session_id Int    @id @default(autoincrement())
  paper_id   Int
  papers     papers @relation(fields: [paper_id], references: [paper_id], onDelete: Cascade, onUpdate: NoAction)
}

model talks {
  talks_id      Int         @id @default(autoincrement())
  conference_id Int
  abstract      String      @db.Char(250)
  authors       String?     @db.Char(30)
  time_         DateTime?   @db.Time(6)
  loca          String      @db.VarChar(100)
  comments      String?     @db.VarChar(250)
  own_talks     own_talks[]
  conference    conference  @relation(fields: [conference_id], references: [conference_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  user_id       Int        @id @default(autoincrement())
  conference_id Int
  role_id       Int
  conference    conference @relation(fields: [conference_id], references: [conference_id], onDelete: Cascade, onUpdate: NoAction)
  roles         roles      @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction)
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  auth_user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  auth_user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model announcement {
  announcement_id   Int     @id @default(autoincrement())
  announcement_desc String? @db.VarChar(200)
}

model is_enabled {
  id   Int      @id @default(autoincrement())
  desc Boolean?
}

model schedule {
  schedule_id   Int        @id @default(autoincrement())
  event_date    DateTime   @db.Date
  event_time    DateTime   @db.Time(6)
  title         String     @db.VarChar(30)
  presentors    String     @db.VarChar(30)
  conference_id Int
  conference    conference @relation(fields: [conference_id], references: [conference_id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id            String    @id
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  Account       Account[]
  Session       Session[]
}

model VerificationCode {
  id        String   @id
  email     String
  code      String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email, code])
}
